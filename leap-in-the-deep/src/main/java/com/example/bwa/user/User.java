package com.example.bwa.user;

import com.example.bwa.enums.UserType;
import com.fasterxml.jackson.annotation.JsonIgnore;
import lombok.*;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.util.List;

@NoArgsConstructor
@AllArgsConstructor
@Getter
@Setter
@ToString
@EqualsAndHashCode
@Entity
@Table(name = "user")
public class User {

    @Id
    @SequenceGenerator(
            name = "user_sequence",
            sequenceName = "user_sequence",
            allocationSize = 1
    )
    @GeneratedValue(
            strategy = GenerationType.SEQUENCE,
            generator = "user_sequence"
    )
    @Column(nullable = false, updatable = false) //WE DON'T SEND id AT POST REQUEST: id - GENERATED BY @GeneratedValue
    private Long userId;
    @Column(unique = true)
    private String username;
    private String password;
    private String email;
    private UserType userType;
    @OneToMany
    @JoinTable(
            name="user_book",
            joinColumns = @JoinColumn( name="user_id"),
            inverseJoinColumns = @JoinColumn( name="book_id")
    )
    @JsonIgnore
    private List<Book> writtenBooks; //cartile scrise de scriitor!!! pt cititor va fi null
    @ManyToMany //un user poate citi mai multe carti, o carte poate fi citita de mai multi useri
    @JoinTable(
            name="user_read",
            joinColumns = @JoinColumn( name="user_id"),
            inverseJoinColumns = @JoinColumn( name="book_id")
    )
    @JsonIgnore
    private List<Book> readBooks; //cartile citite!!!
    @OneToMany
    @JoinTable(
            name="user_wishlist",
            joinColumns = @JoinColumn( name="user_id"),
            inverseJoinColumns = @JoinColumn( name="book_id")
    )
    @JsonIgnore
    private List<Book> wishlist;
    @OneToMany
    @JoinTable(
            name="user_favourite",
            joinColumns = @JoinColumn( name="user_id"),
            inverseJoinColumns = @JoinColumn( name="book_id")
    )
    @JsonIgnore
    private List<Book> favourite;

    public void addWrittenBook(Book book){
        this.writtenBooks.add(book);
    }

    public void addReadBook(Book book){
        this.readBooks.add(book);
    }

    public void addFavouriteBook(Book book){
        if(this.readBooks.contains(book)){
            this.favourite.add(book);
        } else {
            throw new IllegalStateException("Book was not read yet!");
        }
    }

    public void addWishlistBook(Book book){
        if(!this.readBooks.contains(book)){
            this.wishlist.add(book);
        } else {
            throw new IllegalStateException("Book was read!");
        }
    }
}
